----- Start of src/core/memory/PhysicalMemory.cpp -----
#include "PhysicalMemory.hpp"
#include <stdexcept>

PhysicalMemory::PhysicalMemory(size_t size) : memory(size, 0) {}

uint8_t PhysicalMemory::read(uint32_t address) {
    if (address >= memory.size()) {
        throw std::out_of_range("PhysicalMemory::read - Address out of range");
    }
    return memory[address];
}

void PhysicalMemory::write(uint32_t address, uint8_t value) {
    if (address >= memory.size()) {
        throw std::out_of_range("PhysicalMemory::write - Address out of range");
    }
    memory[address] = value;
}

----- End of src/core/memory/PhysicalMemory.cpp -----

----- Start of src/core/memory/PageTableEntry.cpp -----
#include "PageTableEntry.hpp"

PageTableEntry::PageTableEntry(uint32_t value) : entry_value(value) {}

bool PageTableEntry::is_valid() const {
    return entry_value & VALID_BIT;
}

bool PageTableEntry::is_readable(PrivilegeMode mode) const {
    if (!is_valid()) return false;
    if (!(entry_value & READ_BIT)) return false;
    if (mode == PrivilegeMode::USER && !(entry_value & USER_ACCESSIBLE_BIT)) return false;
    return true;
}

bool PageTableEntry::is_writable(PrivilegeMode mode) const {
    if (!is_valid()) return false;
    if (!(entry_value & WRITE_BIT)) return false;
    if (mode == PrivilegeMode::USER && !(entry_value & USER_ACCESSIBLE_BIT)) return false;
    return true;
}

bool PageTableEntry::is_executable(PrivilegeMode mode) const {
    if (!is_valid()) return false;
    if (!(entry_value & EXECUTE_BIT)) return false;
    if (mode == PrivilegeMode::USER && !(entry_value & USER_ACCESSIBLE_BIT)) return false;
    return true;
}

uint32_t PageTableEntry::get_physical_address(uint32_t virtual_address) const {
    // Assuming direct mapping (no offset calculation)
    // In reality, would extract the physical page number and combine it with the offset
    return (entry_value & 0xFFFFF000) | (virtual_address & 0xFFF);
}
----- End of src/core/memory/PageTableEntry.cpp -----

----- Start of src/core/memory/PageTable.cpp -----
#include "PageTable.hpp"
#include <stdexcept>

#include "MMU.hpp"

void PageTable::add_entry(uint32_t virtual_address, PageTableEntry entry) {
    entries[virtual_address] = entry;
}

PageTableEntry PageTable::get_entry(uint32_t virtual_address) {
    auto it = entries.find(virtual_address & 0xFFFFF000); //Page size == 4KB
    if (it != entries.end()) {
        return it->second;
    } else {
        throw PageFaultException("PageTable::get_entry - No entry for virtual address");
    }
}
----- End of src/core/memory/PageTable.cpp -----

----- Start of src/core/memory/MMU.cpp -----
#include "MMU.hpp"
#include <stdexcept>
MMU::MMU(PhysicalMemory* phys_mem, PageTable* pt, PrivilegeMode mode)
    : physical_memory(phys_mem), page_table(pt), privilege_mode(mode) {}

uint32_t MMU::translate_address(uint32_t virtual_address, bool is_write) {
    // 4KB pages and direct mapping
    uint32_t page_number = virtual_address & 0xFFFFF000;

    PageTableEntry entry = page_table->get_entry(page_number);

    if (!entry.is_valid()) {
        throw PageFaultException("MMU::translate_address - Invalid page entry");
    }

    if (is_write && !entry.is_writable(privilege_mode)) {
        throw AccessViolationException("MMU::translate_address - Write not permitted on this page");
    }

    if (!is_write && !entry.is_readable(privilege_mode)) {
        throw AccessViolationException("MMU::translate_address - Read not permitted on this page");
    }

    return entry.get_physical_address(virtual_address);
}

uint8_t MMU::read(uint32_t virtual_address) {
    uint32_t physical_address = translate_address(virtual_address, false);
    return physical_memory->read(physical_address);
}

void MMU::write(uint32_t virtual_address, uint8_t value) {
    uint32_t physical_address = translate_address(virtual_address, true);
    physical_memory->write(physical_address, value);
}

uint32_t MMU::read_word(uint32_t virtual_address) {
    // Read 4 bytes from memory and combine them into a 32-bit word
    uint32_t word = 0;
    word |= static_cast<uint32_t>(read(virtual_address));
    word |= static_cast<uint32_t>(read(virtual_address + 1)) << 8;
    word |= static_cast<uint32_t>(read(virtual_address + 2)) << 16;
    word |= static_cast<uint32_t>(read(virtual_address + 3)) << 24;
    return word;
}

void MMU::write_word(uint32_t virtual_address, uint32_t value) {
    // Write 4 bytes to memory from a 32-bit word
    write(virtual_address, static_cast<uint8_t>(value & 0xFF));
    write(virtual_address + 1, static_cast<uint8_t>((value >> 8) & 0xFF));
    write(virtual_address + 2, static_cast<uint8_t>((value >> 16) & 0xFF));
    write(virtual_address + 3, static_cast<uint8_t>((value >> 24) & 0xFF));
}

void MMU::set_privilege_mode(PrivilegeMode mode) {
    privilege_mode = mode;
}

----- End of src/core/memory/MMU.cpp -----

----- Start of src/core/cpu/CPU.cpp -----
#include "CPU.hpp"
#include <iostream>

CPU::CPU(size_t memory_size)
: pipeline(register_bank, mmu),
  mmu(&physical_memory, &page_table, PrivilegeMode::MACHINE),
  physical_memory(memory_size),
  privilege_mode(PrivilegeMode::MACHINE) {}

int CPU::load_program(const std::string &filepath) {
    return 0; //TODO: Implement load program to memory
}

void CPU::run() {
    try {
        while (true) {
            pipeline.run_cycle();
        }
    } catch (const std::exception& e) {
        // Handle exceptions, such as memory access violations
        // For now, we simply print the error and exit
        std::cerr << "CPU Exception: " << e.what() << std::endl;
    }
}

----- End of src/core/cpu/CPU.cpp -----

----- Start of src/core/cpu/pipeline/fetch/FetchStage.cpp -----
#include "FetchStage.hpp"

FetchStage::FetchStage(MMU& mmu, RegisterBank& register_bank)
    : mmu(mmu),  fetched_instruction(0), register_bank(register_bank) {}

void FetchStage::process() {
    // Fetch the instruction from memory at the current program counter
    uint32_t pc = register_bank.get_pc();
    fetched_instruction = mmu.read_word(pc);

    // Increment the program counter to point to the next instruction
    register_bank.set_pc(pc + 4);
}

uint32_t FetchStage::get_fetched_instruction() {
    return fetched_instruction;
}
----- End of src/core/cpu/pipeline/fetch/FetchStage.cpp -----

----- Start of src/core/cpu/pipeline/Pipeline.cpp -----
#include "Pipeline.hpp"

Pipeline::Pipeline(RegisterBank& register_bank, MMU& mmu)
    : register_bank(register_bank),
      mmu(mmu),
      fetch_stage(mmu, register_bank),
      decode_stage(register_bank) {
}

void Pipeline::run_cycle() {//ToDo
    fetch_stage.process();

    uint32_t instruction = fetch_stage.get_fetched_instruction();

    decode_stage.set_fetched_instruction(instruction);
    decode_stage.process();

}

----- End of src/core/cpu/pipeline/Pipeline.cpp -----

----- Start of src/core/cpu/pipeline/decode/DecodeStage.cpp -----
#include "DecodeStage.hpp"
#include <stdexcept>
#include <cstdint>

// Constructor
DecodeStage::DecodeStage(RegisterBank& register_bank)
    : fetched_instruction(0), register_bank(register_bank), decoded_instruction(DecodedInstruction<InstructionFormat::INIVALID_TYPE>(0)){}

// Process the fetched instruction and decode it
void DecodeStage::process() {
    // Extract the opcode from the fetched instruction
    uint32_t opcode = DecodedInstructionBase(fetched_instruction).get_opcode();

    InstructionFormat format = static_cast<InstructionFormat>(opcode);
    // Decode the instruction based on the opcode
    using enum InstructionFormat;

    switch (format) {
        case R_TYPE:
            decoded_instruction = DecodedInstruction<R_TYPE>(fetched_instruction);
            break;
        case I_TYPE:
            decoded_instruction = DecodedInstruction<I_TYPE>(fetched_instruction);
            break;
        case S_TYPE:
            decoded_instruction = DecodedInstruction<S_TYPE>(fetched_instruction);
            break;
        case B_TYPE:
            decoded_instruction = DecodedInstruction<B_TYPE>(fetched_instruction);
            break;
        case U_TYPE:
            decoded_instruction = DecodedInstruction<U_TYPE>(fetched_instruction);
            break;
        case J_TYPE:
            decoded_instruction = DecodedInstruction<J_TYPE>(fetched_instruction);
            break;
        default:
            throw std::invalid_argument("Unsupported instruction format");
    }
}

// Get the decoded instruction (This is the output)
const DecodedInstructionVariant& DecodeStage::get_decoded_instruction() const {
    return decoded_instruction;
}

// Set the fetched instruction (from FetchStage output)
void DecodeStage::set_fetched_instruction(uint32_t instruction) {
    fetched_instruction = instruction;
}

----- End of src/core/cpu/pipeline/decode/DecodeStage.cpp -----

----- Start of src/core/cpu/register_bank/RegisterBank.cpp -----
#include "RegisterBank.hpp"

RegisterBank::RegisterBank() : pc(0) {
    registers.fill(0); // Initialize all registers to 0
}

uint32_t RegisterBank::read(uint8_t reg) {
    if (reg >= registers.size()) {
        throw std::out_of_range("Register index out of range");
    }
    return registers[reg];
}

void RegisterBank::write(uint8_t reg, uint32_t value) {
    if (reg == 0) {
        throw std::invalid_argument("Cannot write to x0 (read-only register)");
    }
    if (reg >= registers.size()) {
        throw std::out_of_range("Register index out of range");
    }
    registers[reg] = value;
}

uint32_t RegisterBank::get_pc() const {
    return pc;
}

void RegisterBank::set_pc(uint32_t value) {
    pc = value;
}

----- End of src/core/cpu/register_bank/RegisterBank.cpp -----

----- Start of src/main.cpp -----
#include <iostream>

#include "core/cpu/CPU.hpp"

int main(int argc, char* argv[]) {
    // CPU instance with 1 MB of memory
    CPU cpu(1024 * 1024);

    if (argc < 2) {
        std::cerr << "Usage: virtuv <program[.bin]>" << std::endl;
        return 1;
    }

    if (cpu.load_program(argv[1]) != 0) {
        std::cerr << "Failed to load program: " << argv[1] << std::endl;
        return 1;
    }

    cpu.run();

    return 0;
}

----- End of src/main.cpp -----

----- Start of src/bindings/virtuv_bindings.cpp -----
// src/bindings/virtuv_bindings.cpp
#include <pybind11/pybind11.h>
#include <pybind11/stl.h> // For automatic conversion of STL containers

#include "core/cpu/CPU.hpp"
#include "core/memory/PhysicalMemory.hpp"
#include "core/memory/PageTableEntry.hpp"
#include "core/memory/PageTable.hpp"
#include "core/memory/MMU.hpp"
#include "core/cpu/state/PrivilegeMode.hpp"

namespace py = pybind11;

// Exception translation
void translate_page_fault_exception(const PageFaultException& e) {
    PyErr_SetString(PyExc_RuntimeError, e.what());
}

void translate_access_violation_exception(const AccessViolationException& e) {
    PyErr_SetString(PyExc_RuntimeError, e.what());
}

PYBIND11_MODULE(virtuv, m) {
    m.doc() = "VirtuV RISC-V Emulator Python Bindings";

    // Register exception translators
    py::register_exception<PageFaultException>(m, "PageFaultException");
    py::register_exception<AccessViolationException>(m, "AccessViolationException");

    // Bind PrivilegeMode enum
    py::enum_<PrivilegeMode>(m, "PrivilegeMode")
        .value("USER", PrivilegeMode::USER)
        .value("SUPERVISOR", PrivilegeMode::SUPERVISOR)
        .value("MACHINE", PrivilegeMode::MACHINE)
        .export_values();

    // Bind PhysicalMemory class
    py::class_<PhysicalMemory>(m, "PhysicalMemory")
        .def(py::init<size_t>(), py::arg("size"))
        .def("read", &PhysicalMemory::read, "Read a byte from physical memory")
        .def("write", &PhysicalMemory::write, "Write a byte to physical memory");

    // Bind PageTableEntry class
    py::class_<PageTableEntry>(m, "PageTableEntry")
        .def(py::init<uint32_t>(), py::arg("value"))
        .def("is_valid", &PageTableEntry::is_valid)
        .def("is_readable", &PageTableEntry::is_readable, py::arg("mode"))
        .def("is_writable", &PageTableEntry::is_writable, py::arg("mode"))
        .def("is_executable", &PageTableEntry::is_executable, py::arg("mode"))
        .def("get_physical_address", &PageTableEntry::get_physical_address, py::arg("virtual_address"));

    // Bind PageTable class
    py::class_<PageTable>(m, "PageTable")
        .def(py::init<>())
        .def("add_entry", &PageTable::add_entry, py::arg("virtual_address"), py::arg("entry"))
        .def("get_entry", &PageTable::get_entry, py::arg("virtual_address"));

    // Bind MMU class
    py::class_<MMU>(m, "MMU")
        .def(py::init<PhysicalMemory*, PageTable*, PrivilegeMode>(), py::arg("physical_memory"), py::arg("page_table"), py::arg("privilege_mode"))
        .def("read", &MMU::read, "Read a byte from virtual memory", py::arg("virtual_address"))
        .def("write", &MMU::write, "Write a byte to virtual memory", py::arg("virtual_address"), py::arg("value"))
        .def("read_word", &MMU::read_word, "Read a 32-bit word from virtual memory", py::arg("virtual_address"))
        .def("write_word", &MMU::write_word, "Write a 32-bit word to virtual memory", py::arg("virtual_address"), py::arg("value"))
        .def("set_privilege_mode", &MMU::set_privilege_mode, "Set the current privilege mode", py::arg("mode"))
        .def("translate_address", &MMU::translate_address, "Translate a virtual address to a physical address", py::arg("virtual_address"), py::arg("is_write"));
}

----- End of src/bindings/virtuv_bindings.cpp -----

